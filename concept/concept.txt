PlaceHolderの定義の二分化について
  Placeをまとめるものとして、PlaceHolderを使っていたが、これに類似するものをもうひとつ作る。
  DefaultBoard.DefaultBoardは将棋やオセロなど、盤面が単純な四角形、ないし六角形のみで構成される盤を定義する際に有用である。
  親クラスはHash。パラメタは以下の通り
    row
    col
    base_point
  以上。これだけ指定すれば、row＊col分のマス目のある盤面を定義したことになる。
  各マスは、自分に隣接するますの名前を持っているので、adjsを認識できる。でも人間はそれを指定しなくてよいので楽。
  斜めに隣接しているかどうかも判断できる。デフォルト設定では、斜めは隣接していない扱いとなる。（これを再設定できるようにするかは未定）
  各マスを呼ぶには、"r0c0"とすれば、0行目0列目のますを指定したことになる。DefaultBoard[0,0]みたいな感じで指定してもよいし、DefaultBoard[:r0c0]と指定してもよい。
  このことから、DefaultBoardの[]メソッドは、必然的に可変長引数を許すことになり、その引数の数によって挙動を変えるような実装になることが予想される。
  デフォルトでは、基点は左上である。基点とは、r0c0であるという意味である。
  数が大きくなるほど基点から離れる。
  DefaultBoard[0,0].rightとかすれば、右のマスを参照できる。これは全方位について言えることである。

  DefaultBoardに必要なメソッド
    []の中にr値とc値を入力したらその位置のPlaceが返ってくるやつ
  Placeに必要なメソッド
    方位をメソッドで与えたらその方向のPlaceが（あるなら）返ってくるやつ。
    引数に、方位のシンボル値を与えたら、その方向のPlaceが（あるなら）返ってくるやつ。
  あとはボドゲの種類によって変わるだろう。

  オセロに必要なメソッド
    Placeに必要なメソッド
    自分をひっくり返す
    自分の色を返す
    各方位にある石を返す
    各方位の石をひっくり返す
    その場所に石を置けるか判定する
      八方位に対して、以下の判定を行う
        自分と同じ色の石が、その方向の先にあって、
        しかも、その”同じ色の石”にたどり着くまでの間に、ひとつ以上の自分の色と違う色の石が連続して置かれていること。
      これが確定した時点で短絡評価する。
    * Eventに必要なメソッド
      両者が置ける場所がない状態になっているか確認する。
      両者が置けない状態になったら、終了判定に入る。
      盤面全体の黒と白の石の数を確認する。
      色の多い方の色のプレイヤーを勝者とする。

class Place
  def dir(symbol)
    
  end
end

既存のクラスに対してはクラスの継承を行うのではなくmoduleのmixinで実装することで今後の拡張に対応する
gatherだったらオブジェクトが返ってaroundsだったらシンボルが返ったりするのを返り値統一しなさい。オブジェクトにな。
holdがバグの温床になってる。なんとかしろ。
Tokenのinitializeメソッドをもうちょっとシンプルにしてください。
Tokne.jsonでattributesの内容を指定できるようにしてください。



